---
import CardInfo from "@/components/Schedule/CardInfo.astro";
import CardConference from "@/components/Schedule/CardConference.astro";
import TimeAndDuration from "@/components/Schedule/TimeAndDuration.astro";
import ComingSoon from "./ComingSoon.astro";
import type { CollectionEntry } from "astro:content";
import { MdPlace } from "react-icons/md";
import { match } from "ts-pattern";
import TiltedCard from "@/components/TiltedCard";

interface Props {
  displayStats?: boolean;
  event: CollectionEntry<"events">;
}

const { event, displayStats } = Astro.props;
---

<div class="flex flex-col gap-6">
  {
    displayStats && !!event.data.schedule?.stats && (
      <div class="grid w-full grid-cols-2 flex-wrap gap-4 sm:grid-cols-4">
        {event.data.schedule.stats.map((item) => (
          <div class="flex-1 rounded-lg bg-white/5 p-4 text-center font-heading">
            <p class="text-xl font-medium">{item.count}</p>
            <p class="text-xs uppercase tracking-widest opacity-60">
              {item.name}
            </p>
          </div>
        ))}
      </div>
    )
  }

  {
    match(event.data.schedule?.status)
      .with("final", undefined, () => null)
      .with("not-final", () => (
        <h4 class="font-heading text-lg tracking-wide opacity-80">
          Schedule is subject to change
        </h4>
      ))
      .with("preview", () => (
        <h4 class="font-heading text-lg tracking-wide opacity-80">
          Full schedule will be announced soon
        </h4>
      ))
      .exhaustive()
  }

  {
    !event.data.schedule?.items ? (
      <ComingSoon />
    ) : (
      <div class="flex flex-col">
        {event.data.schedule.items
          .toSorted(
            (talk1, talk2) =>
              // Infinity to set startTime=null at the end
              (talk1.startTime?.valueOf() ?? Infinity) -
              (talk2.startTime?.valueOf() ?? Infinity),
          )
          .map((activity) => {
            return (
              <div class="group flex gap-3">
                <div class="flex flex-col items-center gap-1 pt-1">
                  <div class="size-2.5 rounded-full border-2 border-white/40" />
                  <div class="flex-1 border-l border-dashed border-white/20 group-last:hidden" />
                </div>
                <div class="flex w-full flex-col gap-2 pb-6">
                  <div class="flex flex-1 flex-row flex-wrap items-center justify-between gap-x-3 gap-y-1">
                    <TimeAndDuration
                      startTime={activity.startTime}
                      duration={activity.duration}
                      class="font-heading text-sm tracking-wide opacity-80"
                    />
                    {!!activity.location && (
                      <span class="flex items-center gap-1.5 text-xs uppercase tracking-wide opacity-60">
                        <MdPlace className="text-base" />
                        {activity.location}
                      </span>
                    )}
                  </div>
                  <div class="">
                    {match(activity.type)
                      .with("conference", "roundtable", () => (
                        <TiltedCard client:visible>
                          <CardConference activity={activity} event={event} />
                        </TiltedCard>
                      ))
                      .with("info", "lunch", () => <CardInfo info={activity} />)
                      .exhaustive()}
                  </div>
                </div>
              </div>
            );
          })}
      </div>
    )
  }
</div>
