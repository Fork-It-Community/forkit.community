---
import { buttonVariants } from "@/components/ui/button";
import {
  getEventDisplayDate,
  getEventDisplayType,
  shouldShowTickets,
} from "@/lib/events";
import { cn } from "@/lib/utils-client";
import { Image } from "astro:assets";
import type { CollectionEntry } from "astro:content";
import { getEntries } from "astro:content";
import dayjs from "dayjs";
import { MdArrowForward } from "react-icons/md";

interface Props {
  event: CollectionEntry<"events">;
  class?: string;
}

const { event, class: className } = Astro.props;
const coOrganizers = (await getEntries(event.data.coOrganizers ?? []))
  .filter((p) => !!p)
  .slice(0, 5);

const isUpcomingEvent = dayjs().isBefore(event.data.date);
---

<a
  href={`/events/${event.id}`}
  class={cn(
    "group relative z-10 flex flex-col gap-4 overflow-hidden rounded-lg bg-background px-6 py-6 shadow-xl",
    className,
  )}
>
  {
    !!event.data.image?.media && (
      <div
        class={cn(
          "pointer-events-none absolute bottom-0 left-0 right-0 top-0 -z-10 overflow-hidden",
          event.data.status === "cancelled" && "grayscale",
        )}
      >
        <Image
          src={event.data.image.media}
          alt=""
          class={cn(
            "absolute size-full bg-white/20 object-cover object-center transition duration-500 group-hover:scale-110",
          )}
          width={600}
        />
        <div
          class={cn(
            "absolute size-full bg-gradient-to-r from-black/90 via-black/20",
            coOrganizers.length && !isUpcomingEvent && "sm:to-black/80",
          )}
        />
        <div
          class="absolute h-full w-full"
          style={{
            backdropFilter: "blur(32px)",
            maskImage: "linear-gradient(90deg, black 30%, transparent 70%)",
          }}
        />
      </div>
    )
  }
  <div
    class={cn(
      "flex gap-2 max-sm:flex-col",
      isUpcomingEvent && "flex-col flex-1",
    )}
  >
    <div class="flex flex-1 flex-col gap-1">
      <div class="flex items-center gap-3">
        {
          event.data.status === "cancelled" && (
            <div class="bg-background-blur rounded px-1.5 py-1 text-2xs font-bold uppercase leading-none text-white transition group-hover:bg-primary group-hover:text-black">
              Cancelled
            </div>
          )
        }
        <div
          class="text-2xs uppercase tracking-widest opacity-60 transition group-hover:opacity-100"
        >
          {getEventDisplayType(event.data.type)}
        </div>
      </div>
      <div class="flex flex-col">
        <div
          class={cn(
            "font-heading font-medium transition",
            isUpcomingEvent && "text-xl",
            event.data.status === "cancelled" &&
              "opacity-50 group-hover:opacity-100",
          )}
        >
          {getEventDisplayDate(event)}
        </div>
        <div
          class={cn(
            "font-heading text-sm opacity-80 transition group-hover:text-primary group-hover:opacity-100",
            isUpcomingEvent && "text-base",
            event.data.status === "cancelled" &&
              "opacity-50 group-hover:opacity-100",
          )}
        >
          {event.data.city}, {event.data.country}
        </div>
      </div>
    </div>
    {
      !!coOrganizers.length && (
        <div
          class={cn(
            "flex flex-wrap items-center gap-2 sm:justify-end",
            isUpcomingEvent && "sm:justify-start",
          )}
        >
          {coOrganizers.map((coOrganizer) => (
            <Image
              class={cn(
                "size-10 sm:size-12",
                event.data.status === "cancelled" && "brightness-200 grayscale",
              )}
              src={coOrganizer.data.logos.noBgSquare}
              alt={coOrganizer.data.name}
              width={100}
            />
          ))}
        </div>
      )
    }
  </div>
  {
    (event.data.type === "event" || isUpcomingEvent) &&
      event.data.status !== "cancelled" && (
        <div
          class={cn(
            buttonVariants({
              variant:
                isUpcomingEvent && event.data.type === "event"
                  ? "default"
                  : "secondary-dark",
            }),
            "gap-2 sm:max-w-56",
          )}
        >
          {isUpcomingEvent
            ? shouldShowTickets(event)
              ? "Tickets available"
              : "Discover Event"
            : "Explore Past Event"}
          <MdArrowForward className="group-hover:translate-x-1 transition" />
        </div>
      )
  }
</a>
