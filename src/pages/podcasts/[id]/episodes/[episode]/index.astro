---
import { getEntry, getEntries, render } from "astro:content";
import ImageBackgroundHero from "@/components/ImageBackgroundHero/index.astro";
import MainLayout from "@/layouts/MainLayout.astro";
import SEO from "@/components/SEO/index.astro";
import People from "@/components/People/index.astro";
import {
  getPodcastsEpisodesCollection,
  PLATFORMS,
  formatDuration,
} from "@/lib/podcasts";
import dayjs from "dayjs";
import { Schema } from "astro-seo-schema";
import bg from "@/assets/images/podcasts.jpeg";
import { BackButton } from "@/components/BackButton";
import { Image } from "astro:assets";
import { cn } from "@/lib/utils";
import { buttonVariants } from "@/components/ui/button";
import { IoLanguageSharp } from "react-icons/io5";
import { lang } from "@/lib/lang";
import Prose from "@/components/Prose/index.astro";

export async function getStaticPaths() {
  const episodes = await getPodcastsEpisodesCollection();

  return Promise.all(
    episodes.map(async (e) => {
      const [id = "", _, episode] = e.id.split("/");

      const show = await getEntry<"podcasts", string>({
        collection: "podcasts",
        id,
      });

      return {
        params: { id, episode },
        props: {
          episode: e,
          show,
          number: episode,
        },
      };
    }),
  );
}

const { episode, show, number } = Astro.props;

const { Content } = await render(episode);
const hosts = (await getEntries(episode.data.hosts ?? []))
  .filter((p) => !!p)
  .sort((a, b) => a.data.name.localeCompare(b.data.name));
const guests = (await getEntries(episode.data.guests ?? []))
  .filter((p) => !!p)
  .sort((a, b) => a.data.name.localeCompare(b.data.name));

const title = `${episode.data.title} (${number}) | ${show.data.title}`;
const ogImage = new URL(Astro.url.pathname + "/og-image.png", Astro.site);
---

<MainLayout>
  <SEO
    slot="seo"
    {title}
    description={episode.data.description ?? ""}
    image={ogImage.toString()}
  />
  <Schema
    slot="ld+json"
    item={{
      "@context": "https://schema.org",
      "@type": "PodcastEpisode",
      name: episode.data.title,
      datePublished: dayjs(episode.data.releaseDate).format("YYYY-MM-DD"),
      duration: formatDuration(episode.data.duration),
      inLanguage: {
        "@type": "Language",
        name: episode.data.language,
      },
      url:
        (episode.data.urls ?? []).find(
          (url) => url.platform === "link-to-download",
        )?.url ?? "",
      associatedMedia: (episode.data.urls ?? []).map((item) => ({
        "@type": "MediaObject",
        contentUrl: item.url,
        name: PLATFORMS[item.platform].label,
      })),
      image: episode.data.cover.src,
      keywords: episode.data.tags ?? [],
      partOfSeries: {
        "@type": "PodcastSeries",
        name: show.data.title,
      },
      creator: hosts.map((host) => ({
        "@type": "Person",
        name: host.data.name,
      })),
      contributor: guests.map((guest) => ({
        "@type": "Person",
        name: guest.data.name,
      })),
    }}
  />

  <ImageBackgroundHero src={bg} alt="" className="h-[80vh] opacity-80" />
  <div class="mx-auto w-full max-w-screen-lg px-4 py-8">
    <BackButton client:load href="/podcasts" />
  </div>

  <div class="mx-auto w-full max-w-screen-lg p-4 md:py-8">
    <div class="flex flex-col justify-center gap-6 md:flex-row md:gap-10">
      <div class="flex-none">
        <Image
          src={episode.data.cover}
          alt={episode.data.title}
          class="rounded-md object-cover xs:size-64"
          width={860}
          height={860}
        />
      </div>
      <div class="flex min-w-0 flex-1 flex-col gap-6">
        <div class="flex flex-col gap-3">
          <div
            class="flex w-fit items-center gap-1.5 rounded-full border border-black/60 bg-black/40 px-2 py-0.5 text-2xs font-bold uppercase leading-none"
          >
            <IoLanguageSharp className="text-base" />
            <span>Episode in {episode.data.language}</span>
          </div>
          <div class="flex flex-col gap-0.5">
            <h1
              lang={lang(episode.data.language)}
              class="text-balance font-heading text-2xl font-medium tracking-wider"
            >
              {episode.data.title}
            </h1>
            <time
              datetime={dayjs(episode.data.releaseDate).toISOString()}
              class="text-sm uppercase tracking-widest opacity-60"
            >
              {dayjs(episode.data.releaseDate).format("MMMM D, YYYY")}
            </time>
          </div>
          {
            !!episode.data.tags?.length && (
              <div class="flex flex-wrap gap-2 text-xs uppercase tracking-widest opacity-60">
                {episode.data.tags.map((tag) => (
                  <span>#{tag}</span>
                ))}
              </div>
            )
          }
        </div>

        <div class="flex flex-wrap gap-2">
          {
            (episode.data.urls ?? []).map((url) => {
              const { icon: Icon, label } = PLATFORMS[url.platform];

              return (
                <a
                  href={url.url}
                  class={cn(
                    buttonVariants({ variant: "secondary" }),
                    "flex gap-2",
                  )}
                >
                  <span class="text-lg">
                    <Icon />
                  </span>
                  <span class="text-sm uppercase tracking-wide">{label}</span>
                </a>
              );
            })
          }
        </div>
      </div>
    </div>
  </div>

  <div class="mx-auto w-full max-w-screen-sm px-4 py-8">
    <div class="flex flex-col gap-8 pb-32">
      <div lang={lang(episode.data.language)}>
        <Prose>
          <Content />
        </Prose>
      </div>
      {
        !!guests.length && (
          <div class="flex flex-col gap-2">
            <h2 class="font-heading text-sm font-medium uppercase tracking-widest opacity-60">
              Guest{guests.length > 1 ? "s" : ""}
            </h2>
            <div class="grid grid-cols-2 gap-x-4 gap-y-6 xs:grid-cols-3 sm:grid-cols-4">
              {guests.map((person) => (
                <People people={person} />
              ))}
            </div>
          </div>
        )
      }
      <div class="flex flex-col gap-2">
        <h2
          class="font-heading text-sm font-medium uppercase tracking-widest opacity-60"
        >
          Host{hosts.length > 1 ? "s" : ""}
        </h2>
        <div
          class="grid grid-cols-2 gap-x-4 gap-y-6 xs:grid-cols-3 sm:grid-cols-4"
        >
          {hosts.map((person) => <People people={person} />)}
        </div>
      </div>
    </div>
  </div>
</MainLayout>
