---
import { BackButton } from "@/components/BackButton";
import People from "@/components/People/index.astro";
import TimeAndDuration from "@/components/Schedule/TimeAndDuration.astro";
import SEO from "@/components/SEO/index.astro";
import { buttonVariants } from "@/components/ui/button";
import EventSubPageLayout from "@/layouts/EventSubPageLayout.astro";
import { getEventsCollection } from "@/lib/events";
import { lang } from "@/lib/lang";
import { cn } from "@/lib/utils";
import { Schema } from "astro-seo-schema";
import { getEntries, render } from "astro:content";
import dayjs from "dayjs";
import { IoLanguageSharp } from "react-icons/io5";
import { MdArrowOutward, MdPlace } from "react-icons/md";
import type { Place } from "schema-dts";
import Prose from "@/components/Prose/index.astro";

export async function getStaticPaths() {
  const events = await getEventsCollection();

  const talks = (
    await Promise.all(
      events.map(async (event) => {
        const talks = await getEntries(
          (event.data.schedule ?? [])
            .map((activity) => activity.slug)
            .filter((s) => !!s),
        );

        return talks.map((s) => ({
          ...s,
          __event: event,
          __schedule: event.data.schedule?.find(
            (activity) => activity.slug?.id === s.id,
          ),
        }));
      }),
    )
  ).flat();

  return Promise.all(
    talks.map(async (talk) => ({
      params: { id: talk.__event.id, talkId: talk.id },
      props: {
        talk,
        schedule: talk.__schedule,
        speakers: (
          await getEntries(talk.data.speakers.map((speaker) => speaker.id))
        ).map((entry) => ({
          ...entry,
          data: {
            ...entry.data,
            __role: talk.data.speakers.find(
              (speaker) => speaker.id.id === entry.id,
            )?.role,
          },
        })),
        event: talk.__event,
      },
    })),
  );
}

const { talk, event, speakers, schedule } = Astro.props;
const { Content } = await render(talk);

const url = new URL(Astro.url.pathname, Astro.site);
const title = `${talk.data.title} | ${event.data.name}`;

const location: Place | undefined = event.data.location
  ? {
      "@type": "Place",
      address: event.data.location.address,
      name: event.data.location.name ?? "",
    }
  : undefined;

const startDate = schedule?.startTime
  ? dayjs(schedule?.startTime).toISOString()
  : "";
const endDate =
  schedule?.duration && schedule?.startTime
    ? dayjs(schedule?.startTime)
        .add(schedule?.duration, "minutes")
        .toISOString()
    : "";
---

<EventSubPageLayout event={event}>
  {
    /* TODO description will be better with talk description I think (but need to sanitize html) */
    /* The old website was using event description too, so not a regression at the moment */
  }
  <SEO
    slot="seo"
    title={title}
    description={event.data.excerpt ?? ""}
    url={url}
  />
  <Schema
    slot="ld+json"
    item={{
      "@context": "https://schema.org",
      "@type": "SocialEvent",
      name: talk.data.title,
      ...(startDate && { startDate }),
      ...(endDate && { endDate }),
      ...(location && { location }),
      description: event.data.excerpt ?? "",
      organizer: {
        "@type": "Organization",
        name: "Fork it! Community",
        url: "https://www.forkit.community",
      },
      offers: (event.data.tickets?.offers ?? []).map((offer) => ({
        "@type": "Offer",
        price: offer.price,
        priceCurrency: offer.priceCurrency,
        url: event.data.tickets?.href ?? "",
        availability: offer.availability,
        validFrom: offer.validFrom.toISOString(),
      })),
      eventAttendanceMode: event.data.attendanceMode,
      eventStatus: event.data.eventStatus,
      performer: (speakers ?? []).map((speaker) => ({
        "@type": "Person",
        name: speaker.data.name,
        jobTitle: speaker.data.job ?? "",
        worksFor: {
          "@type": "Organization",
          name: speaker.data.company?.title ?? "",
          url: speaker.data.company?.href ?? "",
        },
      })),
    }}
  />
  <div class="max-w-(--breakpoint-sm) mx-auto p-4 md:p-8">
    <div class="flex justify-between">
      <BackButton href={`/events/${event.id}`} client:load />
      {
        event.data.status !== "cancelled" &&
          talk.data.feedback &&
          !dayjs().isBefore(event.data.date) && (
            <a
              href={talk.data.feedback.link}
              target="_blank"
              rel="noreferrer"
              class={cn(
                buttonVariants({ variant: "default", size: "xs" }),
                "flex flex-row gap-2 no-underline",
              )}
            >
              <span>Give feedback</span>
              <MdArrowOutward className="text-base" />
            </a>
          )
      }
    </div>
    <main class="flex flex-col items-center gap-14">
      <Prose>
        <div
          class="not-prose -mb-1 flex flex-1 flex-wrap items-center gap-x-3 gap-y-1 pt-8 text-white"
        >
          <TimeAndDuration
            startTime={talk.__schedule?.startTime}
            duration={talk.__schedule?.duration}
            class="font-heading text-sm tracking-wide"
          />
          {
            !!talk.__schedule?.location && (
              <span class="flex items-center gap-1.5 text-sm uppercase tracking-wide">
                <MdPlace className="text-base" />
                {talk.__schedule?.location}
              </span>
            )
          }
        </div>
        <h1 lang={lang(talk.data.contentLanguage)}>{talk.data.title}</h1>
        <div class="flex gap-2">
          <div>
            <span
              class="text-2xs flex w-fit items-center gap-1.5 rounded-full border border-black/60 bg-black/40 px-2 py-0.5 font-bold uppercase leading-none"
            >
              <IoLanguageSharp className="text-base" />
              <span>Talk in {talk.data.language}</span>
            </span>
          </div>
        </div>
        <div lang={lang(talk.data.contentLanguage)}>
          <Content />
        </div>
      </Prose>

      <div
        class="xs:grid-cols-3 grid grid-cols-2 gap-x-4 gap-y-6 sm:grid-cols-4"
      >
        {
          speakers.map((speaker) => (
            <People people={speaker}>
              {speaker.data.__role && (
                <p class="text-xs opacity-40">{speaker.data.__role}</p>
              )}
            </People>
          ))
        }
      </div>
    </main>
  </div>
</EventSubPageLayout>
