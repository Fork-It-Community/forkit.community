---
import { BackButton } from "@/components/BackButton";
import People from "@/components/People/index.astro";
import TimeAndDuration from "@/components/Schedule/TimeAndDuration.astro";
import SEO from "@/components/SEO/index.astro";
import { buttonVariants } from "@/components/ui/button";
import EventSubPageLayout from "@/layouts/EventSubPageLayout.astro";
import { getEventsCollection } from "@/lib/events";
import { lang } from "@/lib/lang";
import { cn } from "@/lib/utils-client";
import { Schema } from "astro-seo-schema";
import { getEntries, render } from "astro:content";
import dayjs from "dayjs";
import { IoLanguageSharp } from "react-icons/io5";
import { MdArrowOutward, MdPlace } from "react-icons/md";
import type { Place } from "schema-dts";
import Prose from "@/components/Prose/index.astro";
import Sponsors from "@/components/Sponsors/index.astro";
import { lunalink } from "@bearstudio/lunalink";
import { ROUTES } from "@/routes.gen";
import { AddToCalender } from "@/components/AddToCalender";

export async function getStaticPaths() {
  const events = await getEventsCollection();

  const talks = (
    await Promise.all(
      events.map(async (event) => {
        const talks = await getEntries(
          (event.data.schedule?.items ?? [])
            .map((activity) => activity.slug)
            .filter((s) => !!s),
        );

        return talks.map((s) => ({
          ...s,
          __event: event,
          __schedule: event.data.schedule?.items?.find(
            (activity) => activity.slug?.id === s.id,
          ),
        }));
      }),
    )
  ).flat();

  return talks.map((talk) => ({
    params: { id: talk.__event.id, talkId: talk.id },
    props: {
      talk,
    },
  }));
}

const { talk } = Astro.props;

const event = talk.__event;
const schedule = talk.__schedule;
const speakers = (
  await getEntries(talk.data.speakers.map((speaker) => speaker.id))
).map((entry) => ({
  ...entry,
  data: {
    ...entry.data,
    __role: talk.data.speakers.find((speaker) => speaker.id.id === entry.id)
      ?.role,
  },
}));
const sponsors = await getEntries(
  (talk.__event.data.sponsors ?? []).map((s) => s.slug),
);

const { Content } = await render(talk);

const url = new URL(Astro.url.pathname, Astro.site);
const title = `${talk.data.title} | ${event.data._computed.name}`;

const location: Place | undefined = event.data.location
  ? {
      "@type": "Place",
      address: event.data.location.address,
      name: event.data.location.name ?? "",
    }
  : undefined;

const startDate = schedule?.startTime
  ? dayjs(schedule?.startTime).toISOString()
  : "";
const endDate =
  schedule?.duration && schedule?.startTime
    ? dayjs(schedule?.startTime)
        .add(schedule?.duration, "minutes")
        .toISOString()
    : "";
---

<EventSubPageLayout event={event}>
  {
    /* TODO description will be better with talk description I think (but need to sanitize html) */
    /* The old website was using event description too, so not a regression at the moment */
  }
  <SEO
    slot="seo"
    title={title}
    description={event.data.excerpt ?? ""}
    url={url}
  />
  <Schema
    slot="ld+json"
    item={{
      "@context": "https://schema.org",
      "@type": "SocialEvent",
      name: talk.data.title,
      ...(startDate && { startDate }),
      ...(endDate && { endDate }),
      ...(location && { location }),
      description: event.data.excerpt ?? "",
      organizer: {
        "@type": "Organization",
        name: "Fork it! Community",
        url: "https://www.forkit.community",
      },
      offers: (event.data.tickets?.offers ?? []).map((offer) => ({
        "@type": "Offer",
        price: offer.price,
        priceCurrency: offer.priceCurrency,
        availability: offer.availability,
        validFrom: offer.validFrom.toISOString(),
      })),
      eventAttendanceMode: event.data.attendanceMode,
      eventStatus: event.data.eventStatus,
      performer: (speakers ?? []).map((speaker) => ({
        "@type": "Person",
        name: speaker.data.name,
        jobTitle: speaker.data.job ?? "",
        worksFor: {
          "@type": "Organization",
          name: speaker.data.company?.title ?? "",
          url: speaker.data.company?.href ?? "",
        },
      })),
    }}
  />
  <div class="mx-auto max-w-screen-sm p-4 md:p-8">
    <div class="flex justify-between">

  <BackButton
    href={lunalink(ROUTES.events[":id"].__path, { id: event.id })}
    client:load
  />
      <div class="flex gap-2">
        {
          event.data.status !== "cancelled" &&
            talk.data.feedback &&
            !dayjs().isBefore(event.data.date) && (
              <a
                href={talk.data.feedback.link}
                target="_blank"
                rel="noreferrer"
                class={cn(
                  buttonVariants({ variant: "default", size: "xs" }),
                  "flex flex-row gap-2 no-underline",
                )}
              >
                <span>Give feedback</span>
                <MdArrowOutward className="text-base" />
              </a>
            )
        }
      </div>
    </div>
    <main class="flex flex-col items-center gap-14">
      <Prose>
        <div
          class="not-prose -mb-1 flex flex-1 flex-wrap items-center gap-x-3 gap-y-1 pt-8 text-white"
        >
          <TimeAndDuration
            startTime={talk.__schedule?.startTime}
            duration={talk.__schedule?.duration}
            class="font-heading text-sm tracking-wide"
          />
          {
            !!talk.__schedule?.location && (
              <span class="flex items-center gap-1.5 text-sm uppercase tracking-wide">
                <MdPlace className="text-base" />
                {talk.__schedule?.location}
              </span>
            )
          }
           <AddToCalender 
               startTime={talk.__schedule?.startTime} 
               duration={talk.__schedule?.duration}  
               title={talk.data.title} 
               location={talk.__schedule?.location} 
               client:load />
        </div>
        <h1 lang={lang(talk.data.contentLanguage)}>{talk.data.title}</h1>
        <div class="flex gap-2">
          <div>
            <span
              class="flex w-fit items-center gap-1.5 rounded-full border border-black/60 bg-black/40 px-2 py-0.5 text-2xs font-bold uppercase leading-none"
            >
              <IoLanguageSharp className="text-base" />
              <span>Talk in {talk.data.language}</span>
            </span>
          </div>
        </div>
        {
          talk.data.vod && talk.data.vod.type === "youtube" && (
            <iframe
              src={`https://www.youtube.com/embed/${talk.data.vod.youtubeId}`}
              title={talk.data.title}
              allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
              referrerpolicy="strict-origin-when-cross-origin"
              allowfullscreen
              class="mx-auto mt-6 aspect-video w-full overflow-hidden rounded-md"
            />
          )
        }
        <div lang={lang(talk.data.contentLanguage)}>
          <Content />
        </div>
      </Prose>
      <div
        class="grid grid-cols-2 gap-x-4 gap-y-6 xs:grid-cols-3 sm:grid-cols-4"
      >
        {
          speakers.map((speaker) => (
            <People people={speaker}>
              {speaker.data.__role && (
                <p class="text-xs opacity-40">{speaker.data.__role}</p>
              )}
            </People>
          ))
        }
      </div>
    </main>
  </div>

  {
    !!sponsors.length && (
      <div class="relative mx-auto flex w-full max-w-screen-lg flex-col gap-8 px-4 py-12 md:py-24">
        <h2
          id="sponsors"
          class="scroll-mt-32 font-heading text-2xl font-medium uppercase tracking-widest"
        >
          Sponsors
        </h2>
        <Sponsors event={event} sponsors={sponsors} />
      </div>
    )
  }
</EventSubPageLayout>
