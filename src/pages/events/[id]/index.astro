---
import { Logo } from "@/components/Logo";
import { buttonVariants } from "@/components/ui/button";
import FeedbackCTA from "@/components/FeedbackCTA/index.astro";
import EventLayout from "@/layouts/EventLayout.astro";
import Schedule from "@/components/Schedule/index.astro";
import People from "@/components/People/index.astro";
import JoinTheCommunity from "@/components/JoinTheCommunity/index.astro";
import {
  getEventNavItems,
  getEventsCollection,
  getEventSubPagesCollection,
  shouldShowTicketsButton,
  shouldShowCFPButton,
  getEventDisplayDate,
} from "@/lib/events";
import { cn, formatDateTime } from "@/lib/utils";
import { Image } from "astro:assets";
import {
  getEntries,
  // render
} from "astro:content";
import { MdArrowForward } from "react-icons/md";
import { match } from "ts-pattern";
import { motion } from "motion/react";
import { Schema } from "astro-seo-schema";
import type { Place } from "schema-dts";

export async function getStaticPaths() {
  const events = await getEventsCollection();

  return Promise.all(
    events.map(async (event) => ({
      params: { id: event.id },
      props: {
        event,
        subPages: await getEventSubPagesCollection(event),
        speakers: await getEntries(event.data.speakers ?? []),
        talks: await getEntries(
          event.data.schedule
            ?.map((activity) => activity.slug)
            .filter((slug) => !!slug) ?? [],
        ),
        coOrganizers: await getEntries(event.data.coOrganizers ?? []),
        sponsors: await getEntries(
          (event.data.sponsors ?? []).map((s) => s.slug),
        ),
        partners: await getEntries(event.data.partners ?? []),
      },
    })),
  );
}

const {
  event,
  // subPages,
  speakers,
  coOrganizers: _coOrganizers,
  sponsors,
  partners,
} = Astro.props;
const coOrganizers = _coOrganizers.filter((p) => !!p);
const navItems = await getEventNavItems(event.id);
// const { Content } = await render(event);

const location: Place | undefined = event.data.location
  ? {
      "@type": "Place",
      address: event.data.location.address,
      name: event.data.location.name ?? "",
    }
  : undefined;
---

<EventLayout event={event}>
  <Schema
    slot="ld+json"
    item={{
      "@context": "https://schema.org",
      "@type": "Event",
      name: `${event.data.date ? formatDateTime(event.data.date) + " " : ""}${event.data.name}`,
      startDate: event.data.date?.toISOString(),
      endDate: event.data.date?.toISOString(),
      description: event.data.excerpt ?? "",
      offers: (event.data.tickets?.offers ?? []).map((offer) => ({
        "@type": "Offer",
        price: offer.price,
        priceCurrency: offer.priceCurrency,
        url: event.data.tickets?.href ?? "",
        availability: `https://schema.org/${offer.availability}`,
        validFrom: offer.validFrom.toISOString(),
      })),
      eventStatus: `https://schema.org/${event.data.eventStatus}`,
      image: event.data.image?.src.src ?? "",
      organizer: {
        "@type": "Organization",
        name: "Fork it! Community",
        url: "https://www.forkit.community",
      },
      eventAttendanceMode: event.data.attendanceMode,
      performer: (speakers ?? []).map((speaker) => ({
        "@type": "Person",
        name: speaker.data.name,
      })),
      ...(location && { location }),
    }}
  />
  <div
    class="relative flex h-[100svh] min-h-[600px] flex-col items-center justify-center"
  >
    <motion.div
      client:load
      initial={{ opacity: 0, y: -10 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ type: "spring" }}
      className="relative flex flex-1 flex-col items-center justify-center gap-8 p-4 md:gap-12"
    >
      <div class="flex flex-col items-center justify-center gap-4">
        <Logo className="w-32 md:w-48" />
        <h1
          class="flex flex-col gap-1 text-balance text-center font-heading md:gap-2"
        >
          <span class="text-3xl font-medium md:text-6xl">
            {getEventDisplayDate(event)}
          </span>
          <span class="text-xl text-primary md:text-4xl">
            {event.data.city}, {event.data.country}
          </span>

          <span
            class="p-2 text-xs uppercase tracking-widest opacity-60 md:text-sm"
          >
            {
              match(event.data.type)
                .with("event", () => "Full Day Event")
                .with("meetup", () => "Community Meetup")
                .exhaustive()
            }
          </span>
        </h1>
      </div>

      <div class="flex flex-wrap gap-4">
        {
          shouldShowTicketsButton(event) && (
            <a
              href={event.data.tickets.href}
              class={cn(buttonVariants({ size: "lg" }), "group gap-2")}
            >
              Get Your Ticket
              <MdArrowForward className="transition group-hover:translate-x-1" />
            </a>
          )
        }
        {
          shouldShowCFPButton(event) && (
            <a
              href={event.data.cfp.href}
              class={buttonVariants({ size: "lg", variant: "ghost" })}
            >
              CFP
            </a>
          )
        }
      </div>
      {
        !!coOrganizers.length && (
          <div class="flex flex-col items-center justify-center">
            <div class="relative size-8 translate-y-1/2 opacity-20">
              <div class="h-[1px] w-full rotate-45 bg-white" />
              <div class="h-[1px] w-full -rotate-45 bg-white" />
            </div>
            <div class="flex w-full flex-wrap items-center justify-center gap-x-4">
              {coOrganizers.map((coOrganizer) => (
                <a href={coOrganizer.data.href}>
                  <Image
                    class={cn(
                      "size-24 md:size-28",
                      coOrganizers.length > 2 && "size-16 md:size-24",
                    )}
                    src={coOrganizer.data.logos.noBgSquare}
                    alt={coOrganizer.data.name}
                  />
                </a>
              ))}
            </div>
          </div>
        )
      }
    </motion.div>

    <motion.div
      client:load
      initial={{ opacity: 0, y: -5 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ type: "spring", delay: 0.2 }}
      className="absolute bottom-0 left-0 right-0 flex flex-col items-center justify-center gap-2 px-6 py-8 md:py-16"
    >
      <p class="text-xs uppercase tracking-widest opacity-40">Quick Access</p>
      <nav
        class="flex flex-wrap items-center justify-center gap-x-1 xs:gap-x-2 md:gap-x-3"
      >
        {
          navItems.map((item) => (
            <a
              href={item.href}
              class="flex p-2 text-sm underline decoration-foreground/40 underline-offset-4 opacity-60 hover:text-primary hover:decoration-current hover:opacity-100 md:text-base"
            >
              {item.label}
            </a>
          ))
        }
      </nav>
    </motion.div>
  </div>
  {
    !!sponsors.length && (
      <div class="hide-scrollbar overflow-auto">
        <div class="mx-auto flex w-fit items-center gap-6 px-8 py-8">
          {sponsors.map((sponsor) => (
            <a
              href={sponsor.data.href}
              class="opacity-60 brightness-200 grayscale transition duration-300 hover:opacity-100 hover:brightness-100 hover:grayscale-0"
              title={sponsor.data.name}
            >
              <Image
                class="w-24 max-w-none flex-none"
                src={sponsor.data.logos.noBg}
                alt={sponsor.data.name}
                width={192}
                height={116}
              />
            </a>
          ))}
        </div>
      </div>
    )
  }

  <!-- Schedule & Speakers -->
  <div
    class={cn(
      "relative mx-auto flex w-full max-w-screen-sm flex-col gap-24 px-4 py-16 lg:max-w-screen-lg lg:flex-row lg:gap-12",
      !speakers.length && "lg:max-w-screen-sm",
    )}
  >
    <div class="flex w-full flex-[1.3] flex-col gap-8">
      <h2
        id="schedule"
        class="scroll-mt-32 font-heading text-2xl font-medium uppercase tracking-widest"
      >
        Schedule
      </h2>
      <Schedule event={event} />
    </div>

    {
      !!speakers.length && (
        <div class="flex w-full flex-1 flex-col gap-8">
          <h2
            id="speakers"
            class="scroll-mt-32 font-heading text-2xl font-medium uppercase tracking-widest"
          >
            Speakers
          </h2>
          <div class="grid grid-cols-2 gap-x-4 gap-y-6 xs:grid-cols-3 sm:grid-cols-4 md:grid-cols-3">
            {speakers.map((speaker) => (
              <People people={speaker} />
            ))}
          </div>
        </div>
      )
    }
  </div>

  {
    !!sponsors.length && (
      <div class="mx-auto flex w-full max-w-screen-lg flex-col gap-8 px-4 py-12">
        <h2
          id="sponsors"
          class="scroll-mt-32 font-heading text-2xl font-medium uppercase tracking-widest"
        >
          Sponsors
        </h2>
        <div class="flex flex-col gap-8">
          {event.data.sponsoringLevels?.map((sponsoringLevel) => {
            const levelSponsors = event.data.sponsors
              ?.filter((s) => s.level === sponsoringLevel)
              .map(({ slug }) => sponsors.find((s) => s.id === slug.id))
              .filter((s) => !!s);

            if (!levelSponsors?.length) return null;
            return (
              <div class="flex flex-col gap-2">
                <h3 class="font-heading text-base font-medium uppercase tracking-widest">
                  {sponsoringLevel}
                </h3>
                <div class="grid grid-cols-2 gap-2 md:grid-cols-4 md:gap-4">
                  {levelSponsors.map((sponsor) => {
                    if (!sponsor.data.href) {
                      return (
                        <Image
                          src={sponsor.data.logos.bgWhite}
                          alt={sponsor.data.name}
                          class="rounded-md"
                          width={500}
                          height={300}
                        />
                      );
                    }
                    return (
                      <a href={sponsor.data.href}>
                        <Image
                          src={sponsor.data.logos.bgWhite}
                          alt={sponsor.data.name}
                          class="rounded-md"
                          width={500}
                          height={300}
                        />
                      </a>
                    );
                  })}
                </div>
              </div>
            );
          })}
        </div>
      </div>
    )
  }

  <div class="py-12 md:py-24">
    <JoinTheCommunity />
  </div>

  {
    !!partners.length && (
      <div class="mx-auto flex w-full max-w-screen-lg flex-col gap-8 px-4 py-12">
        <h2
          id="partners"
          class="scroll-mt-32 font-heading text-2xl font-medium uppercase tracking-widest"
        >
          Partners
        </h2>

        <div class="grid grid-cols-3 gap-2 md:grid-cols-6 md:gap-4">
          {partners.map((partner) => {
            if (!partner.data.href) {
              return (
                <Image
                  src={partner.data.logos.bgWhite}
                  alt={partner.data.name}
                  class="rounded-md"
                  width={500}
                  height={300}
                />
              );
            }
            return (
              <a href={partner.data.href}>
                <Image
                  src={partner.data.logos.bgWhite}
                  alt={partner.data.name}
                  class="rounded-md"
                  width={500}
                  height={300}
                />
              </a>
            );
          })}
        </div>
      </div>
    )
  }

  {event.data.feedback && <FeedbackCTA href={event.data.feedback.link} />}
</EventLayout>
