---
import { Logo } from "@/components/Logo";
import { buttonVariants } from "@/components/ui/button";
import FeedbackCTA from "@/components/FeedbackCTA/index.astro";
import EventLayout from "@/layouts/EventLayout.astro";
import {
  getEventNavItems,
  getEventsCollection,
  getEventSubPagesCollection,
  shouldShowTicketsButton,
  shouldShowCFPButton,
} from "@/lib/events";
import { cn } from "@/lib/utils";
import { Image } from "astro:assets";
import { getEntries, render } from "astro:content";
import dayjs from "dayjs";
import { MdArrowForward } from "react-icons/md";
import { match } from "ts-pattern";

export async function getStaticPaths() {
  const events = await getEventsCollection();

  return Promise.all(
    events.map(async (event) => ({
      params: { id: event.id },
      props: {
        event,
        subPages: await getEventSubPagesCollection(event),
        speakers: await getEntries(event.data.speakers ?? []),
        talks: await getEntries(event.data.talks ?? []),
        coOrganizers: await getEntries(event.data.coOrganizers ?? []),
        sponsors: await getEntries(
          (event.data.sponsors ?? []).map((s) => s.slug),
        ),
      },
    })),
  );
}

const {
  event,
  subPages,
  speakers,
  talks,
  coOrganizers: _coOrganizers,
  sponsors,
} = Astro.props;
const coOrganizers = _coOrganizers.filter((p) => !!p);
const navItems = await getEventNavItems(event.id);
const { Content } = await render(event);
---

<EventLayout event={event}>
  <div class="flex h-[100svh] flex-col items-center justify-center">
    <div
      class="relative flex flex-1 flex-col items-center justify-center gap-8 p-4 md:gap-12"
    >
      <div class="flex flex-col items-center justify-center gap-4">
        <Logo className="w-32 md:w-48" />
        <h1
          class="flex flex-col gap-1 text-balance text-center font-heading md:gap-2"
        >
          <span class="text-3xl font-medium md:text-6xl">
            {dayjs(event.data.date).format("MMMM DD, YYYY")}
          </span>
          <span class="text-xl text-primary md:text-4xl"
            >{event.data.city}, {event.data.country}</span
          >

          <span
            class="p-2 text-xs uppercase tracking-widest opacity-60 md:text-sm"
          >
            {
              match(event.data.type)
                .with("event", () => "Full Day Event")
                .with("meetup", () => "Community Meetup")
                .exhaustive()
            }
          </span>
        </h1>
      </div>

      <div class="flex flex-wrap gap-4">
        {
          shouldShowTicketsButton(event) && (
            <a
              href={event.data.tickets.href}
              class={cn(buttonVariants(), "group gap-2")}
            >
              Get Your Ticket
              <MdArrowForward className="transition group-hover:translate-x-1" />
            </a>
          )
        }
        {
          shouldShowCFPButton(event) && (
            <a
              href={event.data.cfp.href}
              class={buttonVariants({ variant: "ghost" })}
            >
              CFP
            </a>
          )
        }
      </div>
      {
        !!coOrganizers.length && (
          <div class="flex flex-col items-center justify-center">
            <div class="relative size-8 translate-y-1/2 opacity-20">
              <div class="h-[1px] w-full rotate-45 bg-white" />
              <div class="h-[1px] w-full -rotate-45 bg-white" />
            </div>
            <div class="flex w-full flex-wrap items-center justify-center gap-x-4">
              {coOrganizers.map((coOrganizer) => (
                <a href={coOrganizer.data.href}>
                  <Image
                    class={cn(
                      "size-24 md:size-28",
                      coOrganizers.length > 2 && "size-16 md:size-24",
                    )}
                    src={coOrganizer.data.logos.noBgSquare}
                    alt={coOrganizer.data.name}
                  />
                </a>
              ))}
            </div>
          </div>
        )
      }
    </div>

    <div
      class="absolute bottom-0 left-0 right-0 flex flex-col items-center justify-center gap-2 px-6 py-8 md:py-16"
    >
      <h4 class="text-xs uppercase tracking-widest opacity-40">Quick Access</h4>
      <nav
        class="flex flex-wrap items-center justify-center gap-x-1 xs:gap-x-2 md:gap-x-3"
      >
        {
          navItems.map((item) => (
            <a
              href={item.href}
              class="flex p-2 text-sm underline decoration-foreground/40 underline-offset-4 opacity-60 hover:text-primary hover:decoration-current hover:opacity-100 md:text-base"
            >
              {item.label}
            </a>
          ))
        }
      </nav>
    </div>
  </div>

  <div class="mx-auto w-full max-w-screen-sm px-4 py-24">
    <div>Event page {event.data.name}</div>
    <ul>
      {
        subPages.map((subPage) => (
          <li>
            <a href={`/events/${subPage.id}`}>{subPage.data.title}</a>
          </li>
        ))
      }
    </ul>
    <hr />
    <div id="speakers" class="scroll-mt-20">Speakers</div>
    <ul>
      {speakers.map((speaker) => <li>{speaker.data.name}</li>)}
    </ul>
    <div>Talks</div>
    <ul>
      {talks.map((talk) => <li>{talk.data.title}</li>)}
    </ul>
    <div>Sponsors</div>
    <ul>
      {sponsors.map((sponsor) => <li>{sponsor.data.name}</li>)}
    </ul>
  </div>
  <div class="prose prose-invert mx-auto w-full max-w-screen-sm px-4 py-24">
    <Content />
  </div>
  {event.data.feedback && <FeedbackCTA href={event.data.feedback.link} />}
</EventLayout>
