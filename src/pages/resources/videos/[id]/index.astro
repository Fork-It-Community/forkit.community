---
import { getCollection } from "astro:content";
import MainLayout from "@/layouts/MainLayout.astro";
import { lang } from "@/lib/lang";
import { IoLanguageSharp } from "react-icons/io5";
import { SEO } from "astro-seo";
import { BackButton } from "@/components/BackButton";
import { render } from "astro:content";
import Prose from "@/components/Prose/index.astro";
import { getEntries } from "astro:content";
import People from "@/components/People/index.astro";
import { getRelatedTalks } from "@/lib/events";
import { MdArrowOutward } from "react-icons/md";
import { cn } from "@/lib/utils-client";
import { buttonVariants } from "@/components/ui/button";
import defaultImage from "@/assets/images/events.jpeg";
import { Image } from "astro:assets";
import { getEntry } from "astro:content";
import ImageBackgroundHero from "@/components/ImageBackgroundHero/index.astro";
import { Schema } from "astro-seo-schema";

export async function getStaticPaths() {
  const talks = await getCollection("talks");
  return talks
    .filter((talk) => talk.data.vod)
    .map((talk) => ({
      params: { id: talk.data.vod?.youtubeId },
      props: { talk },
    }));
}

const { talk } = Astro.props;
const { Content } = await render(talk);
const speakers = (
  await getEntries(talk.data.speakers.map((speaker) => speaker.id))
).map((entry) => ({
  ...entry,
  data: {
    ...entry.data,
    __role: talk.data.speakers.find((speaker) => speaker.id.id === entry.id)
      ?.role,
  },
}));
const event = await getEntry("events", talk.data.vod?.event.id ?? "");
const relatedTalks = await getRelatedTalks(talk);
---

<MainLayout>
  <SEO
    slot="seo"
    title={talk.data.title}
    description=`Watch ${talk.data.title} from Fork It!`
  />
  <Schema
    slot="ld+json"
    item={{
      "@type": "MediaObject",
      "@context": "https://schema.org",
      name: talk.data.title,
      description: `Replay of the talk "${talk.data.title}" by ${speakers
        .map((speaker) => speaker.data.name)
        .join(", ")}`,
      contentUrl: `https://www.youtube.com/watch?v=${talk.data.vod?.youtubeId}`,
      embedUrl: `https://www.youtube.com/embed/${talk.data.vod?.youtubeId}`,
      thumbnailUrl: `https://img.youtube.com/vi/${talk.data.vod?.youtubeId}/maxresdefault.jpg`,
    }}
  />
  <ImageBackgroundHero
    src={event?.data.image.media ?? defaultImage}
    alt=""
    className="h-[80vh] opacity-80"
    blur
  />
  <div class="mx-auto w-full max-w-screen-sm px-4 pb-4 pt-8">
    <div class="flex items-center justify-between">
      <BackButton
        client:load
        href="/resources/videos"
        contextLabel="Fork It! Videos"
      />
      <div class="flex gap-2">
        {
          talk.data.feedback?.link && (
            <a
              href={talk.data.feedback.link}
              target="_blank"
              rel="noreferrer"
              class={cn(
                buttonVariants({ variant: "default", size: "xs" }),
                "flex flex-row gap-2 no-underline",
              )}
            >
              <span>Give feedback</span>
              <MdArrowOutward className="text-base" />
            </a>
          )
        }
      </div>
    </div>
  </div>
  <div class="mx-auto max-w-screen-sm p-4 md:p-8">
    <main class="flex flex-col items-center gap-14">
      <Prose>
        <h1 lang={lang(talk.data.contentLanguage)}>{talk.data.title}</h1>
        <div class="flex gap-2">
          <div>
            <span
              class="flex w-fit items-center gap-1.5 rounded-full border border-black/60 bg-black/40 px-2 py-0.5 text-2xs font-bold uppercase leading-none"
            >
              <IoLanguageSharp className="text-base" />
              <span>Talk in {talk.data.language}</span>
            </span>
          </div>
        </div>
        {
          talk.data.vod && talk.data.vod.type === "youtube" && (
            <iframe
              src={`https://www.youtube.com/embed/${talk.data.vod.youtubeId}`}
              title={talk.data.title}
              allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
              referrerpolicy="strict-origin-when-cross-origin"
              allowfullscreen
              class="mx-auto mt-6 aspect-video w-full overflow-hidden rounded-md"
            />
          )
        }
        <div lang={lang(talk.data.contentLanguage)}>
          <Content />
        </div>
      </Prose>
      <div
        class="grid grid-cols-2 gap-x-4 gap-y-6 xs:grid-cols-3 sm:grid-cols-4"
      >
        {
          speakers.map((speaker) => (
            <People people={speaker}>
              {speaker.data.__role && (
                <p class="text-xs opacity-40">{speaker.data.__role}</p>
              )}
            </People>
          ))
        }
      </div>
      {
        relatedTalks.length > 0 && (
          <section class="space-y-6">
            <h2 class="font-heading text-xl font-medium">
              More from this event
            </h2>
            <div class="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-2">
              {relatedTalks.map((relatedTalk) => (
                <a
                  href={`/resources/videos/${relatedTalk.data.vod?.youtubeId}`}
                  class="group relative z-10 flex h-full flex-col gap-4 overflow-hidden rounded-lg bg-white/5 p-4 backdrop-blur-md transition duration-500 hover:bg-white/10"
                >
                  <div class="aspect-video">
                    {relatedTalk.data.vod?.type === "youtube" && (
                      <Image
                        src={`https://img.youtube.com/vi/${relatedTalk.data.vod.youtubeId}/maxresdefault.jpg`}
                        alt={relatedTalk.data.title}
                        class="h-full w-full object-cover"
                        width={480}
                        height={320}
                      />
                    )}
                  </div>
                  <div class="flex flex-1 flex-col justify-between px-2">
                    <h3
                      class="line-clamp-2 text-sm font-medium"
                      lang={lang(relatedTalk.data.contentLanguage)}
                    >
                      {relatedTalk.data.title}
                    </h3>

                    <div class="mt-4 flex w-fit items-center gap-1.5 rounded-full border border-black/60 bg-black/40 px-2 py-0.5 text-2xs font-bold uppercase leading-none opacity-60 transition group-hover:opacity-100">
                      <IoLanguageSharp className="text-base" />
                      <span>
                        Talk in{" "}
                        {typeof relatedTalk.data.language === "string"
                          ? relatedTalk.data.language
                          : "English"}
                      </span>
                    </div>
                  </div>
                </a>
              ))}
            </div>
          </section>
        )
      }
    </main>
  </div>
</MainLayout>
