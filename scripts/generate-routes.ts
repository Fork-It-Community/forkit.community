import fs from "node:fs";
import path from "node:path";

const getKey = (itemName: string) => {
  // Handle  [name] => :name, [__image].[__type] => :__image.:__type
  if (/\[.*\]/.test(itemName)) {
    return itemName
      .split(".")
      .map((part) =>
        part.startsWith("[") && part.endsWith("]")
          ? `:${part.slice(1, -1)}`
          : part,
      )
      .join(".");
  }
  return itemName;
};

const generateRoutes = () => {
  const __dirname = path.dirname(
    new URL(import.meta.url).pathname.replace(/^\/([A-Za-z]:)/, "$1"),
  );
  try {
    const readDirectory = (dirPath: string) => {
      const result: Record<string, unknown> = {};
      const items = fs.readdirSync(dirPath, { withFileTypes: true });

      items.forEach((item) => {
        if (item.isDirectory()) {
          // (name) => Ignore the level in the object
          if (item.name.match(/^\(.*\)$/)) {
            const subResult = readDirectory(`${dirPath}/${item.name}`);
            Object.assign(result, subResult);
          } else {
            result[getKey(item.name)] = readDirectory(
              `${dirPath}/${item.name}`,
            );
          }
        } else if (item.isFile()) {
          // Skip index files
          if (item.name.startsWith("index.")) return;
          // Remove extension from file name
          const fileNameWithoutExt = item.name.replace(/\.[^.]+$/, "");
          result[getKey(fileNameWithoutExt)] = {};
        }
      });

      return result;
    };

    const routes = readDirectory(path.join(__dirname, "../src/pages"));
    const outputPath = path.join(__dirname, "../src/routes.gen.ts");
    const routesContent = `
// This file was automatically generated by pnpm build:routes
// You should NOT make any changes in this file as it will be overwritten.

  import { assignPaths } from '@/lib/routes';

  const ROUTES_CONFIG = ${JSON.stringify(routes, null, 2)} as const;

  export const ROUTES = assignPaths(ROUTES_CONFIG);
  `;
    fs.writeFileSync(outputPath, routesContent);

    console.log("✅ Routes generated `./src/routes.gen.ts`");
  } catch (error) {
    console.error(error);
    throw new Error("❌ Failed to generate `./src/routes.gen.ts`");
  }
};

generateRoutes();
